<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <!--  扫描业务逻辑组件  -->
    <context:component-scan base-package="zrx">
        <!--  让spring不扫描Controller控制器  -->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--引入c3p0配置文件-->
        <context:property-placeholder location="classpath:dbconfig.properties"/>
    <!--配置c3p0连接池-->
    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driverClass}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!--  配置和mybatis整合 创建 sessionFactory工厂-->
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--  指定mybatis全局配置文件的位置  -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!--  指定数据源  -->
        <property name="dataSource" ref="pooledDataSource"></property>
        <!--  指定mybatis的mapper配置文件所在位置  -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>

    <!--  配置和扫描器，将mybatis接口的实现加入到ioc容器中  -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--  扫描所有的dao接口的实现  -->
        <property name="basePackage" value="zrx.crud.dao"></property>
    </bean>

    <!--  配置可以批量执行的sqlSession  -->
    <bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sessionFactory"></constructor-arg>
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="pooledDataSource"></property>
    </bean>
    <!--配置事务的增强，事务如何切入-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--配置事务的属性-->
        <tx:attributes>
            <!-- 切入点所有方法都是事务方法 -->
            <tx:method name="*"/>
            <!-- 以为get开头的所有方法 都是只读的-->
            <tx:method name="get*" read-only="true"></tx:method>
        </tx:attributes>
    </tx:advice>
    <!--配置aop-->
    <aop:config>
        <!--配置aop中的通用切入点表达式-->
        <aop:pointcut id="txPoint" expression="execution(* zrx.crud.service..*(..))"/>
        <!--建立事务通知和切入点表达式的对应关系-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"></aop:advisor>
    </aop:config>

</beans>